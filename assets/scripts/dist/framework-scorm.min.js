"use strict";

function _typeof(e) {
    return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
        return typeof e
    } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
    })(e)
}
var _Debug = !1,
    _NoError = 0,
    _GeneralException = 101,
    _ServerBusy = 102,
    _InvalidArgumentError = 201,
    _ElementCannotHaveChildren = 202,
    _ElementIsNotAnArray = 203,
    _NotInitialized = 301,
    _NotImplementedError = 401,
    _InvalidSetValue = 402,
    _ElementIsReadOnly = 403,
    _ElementIsWriteOnly = 404,
    _IncorrectDataType = 405,
    apiHandle = null,
    API = null,
    findAPITries = 0;

function doLMSInitialize() {
    var e = getAPIHandle();
    if (null == e) return "false";
    var t = e.LMSInitialize("");
    if ("true" != t.toString()) ErrorHandler();
    return t.toString()
}

function doLMSFinish() {
    return null == getAPIHandle() ? "false" : "true"
}

function doLMSGetValue(e) {
    var t = getAPIHandle();
    if (null == t) return "";
    var a = t.LMSGetValue(e),
        n = t.LMSGetLastError().toString();
    if (n == _NoError) return null != a && "object" == _typeof(a) ? a.toString() : a;
    t.LMSGetErrorString(n);
    return ""
}

function doLMSSetValue(e, t) {
    var a = getAPIHandle();
    if (null != a && "true" != a.LMSSetValue(e, t).toString()) ErrorHandler()
}

function doLMSCommit() {
    var e = getAPIHandle();
    if (null == e) return "false";
    var t = e.LMSCommit("");
    if ("true" != t) ErrorHandler();
    return t.toString()
}

function doLMSGetLastError() {
    var e = getAPIHandle();
    return null == e ? _GeneralError : e.LMSGetLastError().toString()
}

function doLMSGetErrorString(e) {
    return getAPIHandle().LMSGetErrorString(e).toString()
}

function doLMSGetDiagnostic(e) {
    return getAPIHandle().LMSGetDiagnostic(e).toString()
}

function LMSIsInitialized() {
    var e = getAPIHandle();
    if (null == e) return !1;
    e.LMSGetValue("cmi.core.student_name");
    return e.LMSGetLastError().toString() != _NotInitialized
}

function ErrorHandler() {
    var e = getAPIHandle();
    if (null != e) {
        var t = e.LMSGetLastError().toString();
        if (t != _NoError) {
            e.LMSGetErrorString(t);
            1 == _Debug && e.LMSGetDiagnostic(null)
        }
        return t
    }
}

function getAPIHandle() {
    return null == apiHandle && (apiHandle = getAPI()), apiHandle
}

function findAPI(e) {
    for (; null == e.API && null != e.parent && e.parent != e;) {
        if (7 < ++findAPITries) return null;
        e = e.parent
    }
    return e.API
}

function getAPI() {
    var e = findAPI(window);
    return null == e && null != window.opener && void 0 !== window.opener && (e = findAPI(window.opener)), e
}! function (v) {
    function t() {
        return new Promise(function (e) {
            doLMSInitialize("");
            var t = doLMSGetValue("cmi.suspend_data");
            (b = null == t || "" == t ? {} : JSON.parse(t)).answers = b.answers || {}, b.requiredBtn = b.requiredBtn || {}, e(t)
        })
    }
    var b = {
            answers: {},
            requiredBtn: {}
        },
        a = function () {
            return new Promise(function (e) {
                doLMSInitialize(""), doLMSSetValue("cmi.core.lesson_status", "completed"), doLMSCommit(""), doLMSFinish(""), e()
            })
        },
        S = function () {
            return new Promise(function (e) {
                doLMSInitialize(""), doLMSSetValue("cmi.suspend_data", JSON.stringify(b)), doLMSCommit(""), doLMSFinish(""), e()
            })
        },
        h = function () {
            v(".question").length == v(".question").filter('[data-scorm-answered="true"]').length && a()
        },
        n = function () {
            sectionLength = v(".section").length, v.scrollify.setOptions({
                after: function (e) {
                    b.lastStep = e, S(), e === sectionLength - 1 && a()
                }
            })
        },
        i = function () {
            v(".btn-finish").on("click", function (e) {
                e.preventDefault(), a()
            })
        },
        r = function () {
            v(".required-btn").on("click", function (e) {
                var t = v(".required-btn");
                (t.length === t.filter(".was-clicked").length ? a : o)()
            })
        },
        o = function () {
            doLMSInitialize(""), doLMSSetValue("cmi.core.lesson_status", "incomplete"), doLMSCommit(""), doLMSFinish("")
        };
    v(document).ready(function () {
        var e;
        o(), v('.question input[type="radio"]').on("click", function () {
            v(this).closest(".question").find(".btn-save").removeClass("disabled").prop("disabled", !1)
        }), v('.question input[type="checkbox"]').on("click", function () {
            v(this).closest(".question").find(".btn-save").removeClass("disabled").prop("disabled", !1)
        }), t(), v.scrollify.move(b.lastStep), Object.keys(b.answers).length && v(".question").each(function () {
            var e = v(this),
                t = v(this).data("scorm-id"),
                a = b.answers[t];
            if (a) {
                if ("discursive" === a.type && e.addClass("question-answered").find("textarea").val(a.value), "objective" === a.type) e.data("scorm-attempt-total", a.attempts), (e.data("scorm-attempt") <= a.attempts || "1" == a.score) && (e.find(".btn-save").addClass("disabled").prop("disabled", !0), e.find("input:radio").prop("disabled", !0), v(this).closest(".question").addClass("show-last-feedback"), e.attr("data-scorm-answered", !0)), e.find("input:radio").filter('[value="' + a.value + '"]').prop("checked", !0), e.find(".question-feedback").filter('[data-scorm-feedback="' + a.value + '"]').addClass("is-open");
                if ("objective-multiple" === a.type) {
                    e.data("scorm-attempt-total", a.attempts), (e.data("scorm-attempt") <= a.attempts || a.score == a.totalScore) && (e.find(".btn-save").addClass("disabled").prop("disabled", !0), e.find("input:checkbox").prop("disabled", !0), v(this).closest(".question").addClass("show-last-feedback"), e.attr("data-scorm-answered", !0));
                    for (var n = 0; n < a.checkboxId.length; n++) e.find("input:checkbox").filter('[id="' + a.checkboxId[n] + '"]').prop("checked", !0);
                    "positive" == a.checkboxFeedback && e.find('.question-feedback[data-scorm-feedback="positive"]').addClass("is-open"), "negative" == a.checkboxFeedback && e.find('.question-feedback[data-scorm-feedback="negative"]').addClass("is-open")
                }
            }
        }), v(".btn-save").on("click", function (e) {
            var m = this;
            e.preventDefault(), t().then(function () {
                var e = v(m).closest(".question"),
                    a = e.find(".textarea"),
                    t = e.find("input:radio"),
                    n = e.find("input:checkbox"),
                    i = e.find(".question-feedback"),
                    r = e.data("scorm-id"),
                    o = e.data("scorm-total-score");
                b.answers[r] = {};
                var s = e.data("scorm-type");
                if (a.each(function () {
                        v(this).val().length
                    }), "discursive" == s && (e.addClass("question-answered").find(".question-output").each(function () {
                        var e = v(this).data("output-textarea"),
                            t = a.filter("[data-exercicio-textarea=" + e + "]").val();
                        v(this).val(t), b.answers[r].value = t, b.answers[r].type = "discursive"
                    }), e.attr("data-scorm-answered", !0)), "objective" == s) {
                    var d = e.data("scorm-attempt-total") ? e.data("scorm-attempt-total") : 0;
                    d += 1, e.data("scorm-attempt-total", d);
                    var l = e.data("scorm-attempt"),
                        c = t.filter('[data-scorm-target="1"]').is(":checked") ? "1" : "0",
                        u = t.filter(":checked").val();
                    i.removeClass("is-open").filter('[data-scorm-feedback="' + u + '"]').addClass("is-open");
                    (l <= d || "1" == c) && (v(m).closest(".btn-save").addClass("disabled").prop("disabled", !0), t.prop("disabled", !0), v(m).closest(".question").addClass("show-last-feedback"), e.attr("data-scorm-answered", !0)), b.answers[r].value = u, b.answers[r].score = c, b.answers[r].type = "objective", b.answers[r].attempts = d
                }
                if ("objective-multiple" == s) {
                    d = e.data("scorm-attempt-total") ? e.data("scorm-attempt-total") : 0;
                    d += 1, e.data("scorm-attempt-total", d);
                    l = e.data("scorm-attempt"), c = 0;
                    var f = [];
                    if (e.find("input:checkbox:checked").each(function (e) {
                            c += isNaN(parseInt(v(this).val())) ? 0 : parseInt(v(this).val()), f[e] = v(this).attr("id")
                        }), o == c) {
                        i.removeClass("is-open").filter('[data-scorm-feedback="positive"]').addClass("is-open");
                        var p = "positive"
                    } else i.removeClass("is-open").filter('[data-scorm-feedback="negative"]').addClass("is-open"), p = "negative";
                    (l <= d || c == o) && (v(m).closest(".btn-save").addClass("disabled").prop("disabled", !0), n.prop("disabled", !0), v(m).closest(".question").addClass("show-last-feedback"), e.attr("data-scorm-answered", !0)), b.answers[r].score = c, b.answers[r].totalScore = o, b.answers[r].checkboxId = f, b.answers[r].checkboxFeedback = p, b.answers[r].type = "objective-multiple", b.answers[r].attempts = d
                }
                S().then(function () {
                    h()
                })
            })
        }), v(".btn-edit").on("click", function (e) {
            e.preventDefault(), v(this).closest(".question").removeClass("question-answered")
        }), "visualization-btn" === (e = v("body").data("scorm-type")) && i(), "visualization-last" === e && n(), "visualization-required-btn" === e && r(), "visualization" === e && a(), "activity" === e && h(), t(), v(".required-btn").on("click", function () {
            var e = v(this).data("required-btn-id");
            v(this).addClass("was-clicked"), b.requiredBtn[e] = 1, S()
        }), Object.keys(b.requiredBtn).length && v(".required-btn").each(function () {
            var e = v(this),
                t = v(this).data("required-btn-id");
            b.requiredBtn[t] && e.addClass("was-clicked")
        })
    })
}(jQuery);